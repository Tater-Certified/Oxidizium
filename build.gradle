import java.security.MessageDigest

plugins {
    id 'fabric-loom' version '1.10-SNAPSHOT'
    id 'maven-publish'
}

version = project.mod_version
group = project.maven_group

base {
    archivesName = project.archives_base_name
}


repositories {
    mavenCentral()
    maven { url 'https://jitpack.io' }
}

dependencies {
    // To change the versions see the gradle.properties file
    minecraft "com.mojang:minecraft:${project.minecraft_version}"
    mappings "net.fabricmc:yarn:${project.yarn_mappings}:v2"
    modImplementation "net.fabricmc:fabric-loader:${project.loader_version}"
    include(implementation 'com.github.Tater-Certified:MixinConstraints:4856759a06')
    include(implementation 'io.github.spair:imgui-java-app:1.89.0')
}

processResources {
    inputs.property "version", project.version
    inputs.property "minecraft_version", project.minecraft_version
    inputs.property "loader_version", project.loader_version
    filteringCharset "UTF-8"

    filesMatching("fabric.mod.json") {
        expand "version": project.version,
                "minecraft_version": project.minecraft_version,
                "loader_version": project.loader_version
    }
}

def targetJavaVersion = 22
tasks.withType(JavaCompile).configureEach {
    // ensure that the encoding is set to UTF-8, no matter what the system default is
    // this fixes some edge cases with special characters not displaying correctly
    // see http://yodaconditions.net/blog/fix-for-java-file-encoding-problems-with-gradle.html
    // If Javadoc is generated, this must be specified in that task too.
    it.options.encoding = "UTF-8"
    if (targetJavaVersion >= 10 || JavaVersion.current().isJava10Compatible()) {
        it.options.release.set(targetJavaVersion)
        it.options.compilerArgs += "--enable-preview"
    }
}

java {
    def javaVersion = JavaVersion.toVersion(targetJavaVersion)
    if (JavaVersion.current() < javaVersion) {
        toolchain.languageVersion = JavaLanguageVersion.of(targetJavaVersion)
    }
    // Loom will automatically attach sourcesJar to a RemapSourcesJar task and to the "build" task
    // if it is present.
    // If you remove this line, sources will not be generated.
    withSourcesJar()
}

jar {
    from("LICENSE") {
        rename { "${it}_${project.archivesBaseName}" }
    }
}

compileJava {
    options.compilerArgs << '-parameters'
}

def hashLib = tasks.register('hashLib') {
    def possibleFiles = [
            "liboxidizium_linux_x86.so",
            "liboxidizium_linux_arm64.so",
            "oxidizium_windows_x86.dll",
            "oxidizium_windows_arm64.dll",
            "liboxidizium_mac_x86.dylib",
            "liboxidizium_mac_arm64.dylib"
    ]

    def foundFile = null

    doLast {
        // Find the first existing file
        for (String path : possibleFiles) {
            def f = file("src/main/resources/${path}")
            if (f.exists()) {
                foundFile = f
                break
            }
        }

        if (foundFile == null) {
            throw new GradleException("None of the expected files were found.")
        }

        def outputFile = file("src/main/resources/oxidizium_rust.hash")

        // Read file bytes
        byte[] fileBytes = foundFile.bytes

        // Generate SHA-256 hash
        MessageDigest digest = MessageDigest.getInstance("SHA-256")
        byte[] hashBytes = digest.digest(fileBytes)

        // Convert to hex string
        StringBuilder hexString = new StringBuilder()
        for (byte b : hashBytes) {
            String hex = Integer.toHexString(0xff & b)
            if (hex.length() == 1) hexString.append('0')
            hexString.append(hex)
        }

        // Write the hash to output file
        outputFile.text = hexString.toString()

        println "Hashed ${foundFile.name} -> ${outputFile.name}"
    }
}

tasks.named("jar") {
    dependsOn(hashLib)
}

// configure the maven publication
publishing {
    publications {
        create("mavenJava", MavenPublication) {
            artifactId = project.archives_base_name
            from components.java
        }
    }

    // See https://docs.gradle.org/current/userguide/publishing_maven.html for information on how to set up publishing.
    repositories {
        // Add repositories to publish to here.
        // Notice: This block does NOT have the same function as the block in the top level.
        // The repositories here will be used for publishing your artifact, not for
        // retrieving dependencies.
    }
}
